# Обработка эвакуации
$ ->
  evacuation.init()


# Параметры и функции, связанные с эвакуацией
evacuation =
  dom_element: $("#evac_btn")
  polyline: undefined 
  hidden_polyline: undefined 
  escape_marker: undefined
  path_length: undefined
  audio: document.getElementById('hallelujah')


  # Запуск слушателя при нажатии
  init: ->
    # При нажатии строит маршрут до ближайшего места от текущего, отображает кнопку рассказать, играет звук и увеличивает статистику
    $(evacuation.dom_element).click ->
      evacuation.get_directions(app.current_location, app.places.closest)
      evacuation.share_mode_on()
      evacuation.evac_stat_increase()
      setTimeout(->
        evacuation.audio.play()
      ,1000)


  # Скрывает кнопку валить и показывает кнопку рассказать
  share_mode_on: ->
    @.dom_element.addClass("hidden")
    $("#share_btn").removeClass("hidden")


  # Запускает метод увеличения статистики эвакуации
  evac_stat_increase: ->
    $.ajax "../stats/evacuate",
      type: "POST"
      dataType: "json"


  # Строит маршрут до ближайшего места
  # @param start_point [google.maps.LatLng] место начала
  # @param end_place [Object] место конца
  get_directions: (start_point, end_place) ->
    end_point = new google.maps.LatLng(end_place.lat, end_place.lng)

    directions_service =new google.maps.DirectionsService()
    directions_service_options = evacuation.get_directions_service_options(start_point, end_point)

    directions_service.route(directions_service_options, (response, status) ->
      # Выводит маршрут и гонит по нему петра
      evacuation.set_time_to_evac(response)
      evacuation.create_end_place_infobox(end_place)
      evacuation.adjust_center(response, start_point, end_point)
      evacuation.escape(response, start_point, end_point)
    )

    
  # Запускает анимацию сваливания из рашки, создавая маршрут и расставляя на нем временные точки для маркера
  # @note запускается из evacuation.get_directions
  # @param response [Маршрут] маршрут до места
  # @param start_point [google.maps.LatLng] место начала маршрута
  # @param end_point [google.maps.LatLng] место конца
  escape: (response, start_point, end_point) ->
    # Если нет маршрута, то имитируем его
    if response.status == "ZERO_RESULTS"
      legs = [{steps: [{path: [start_point, end_point]}]}]
    else
      legs = response.routes[0].legs

    evacuation.prepare_escape_polyline(legs)
    evacuation.add_evac_segments(legs)
    evacuation.start_animation()


  # Расставляет на маршруте сваливания временные точки для анимации маркера
  # @note запускается из evacuation.escape
  # @param legs [route.legs] уточненный путь маршрута
  add_evac_segments: (legs) ->
    i = 0
    while i < legs.length
      steps = legs[i].steps
      j = 0
      while j < steps.length
        nextSegment = steps[j].path
        k = 0
        while k < nextSegment.length
          app.path_to_evac.getPath().push nextSegment[k]
          k++
        j++
      i++


  # Создает маршрут, на котором будут расставлены маркеры для анимации
  # @note запускается из evacuation.escape
  # @param legs [route.legs] уточненный путь маршрута
  prepare_escape_polyline: (legs) ->
    app.path_to_evac = new google.maps.Polyline(
      path: []
      strokeColor:'#24c94b'
      strokeWeight: "6"
    )

    evacuation.escape_marker = new google.maps.Marker(
      position: legs[0].steps[0].start_location
      map: app.google_map
      icon: "<%= asset_path('map/mover.png') %>"
    )


  # Какая-то лютая магия с махинациями с маркерами для того, чтобы анимация сваливания работала ок
  # @note запускается из evacuation.animate
  # @param distance [Number] расстояние, на который нужно передвинуть маркер сваливания
  poly_magic: (distance) ->

    lastVertex = 1
    evacuation.hidden_polyline = new google.maps.Polyline([app.path_to_evac.getPath().getAt(lastVertex - 1)])  if evacuation.hidden_polyline.getPath().getLength() > 20

    if app.path_to_evac.GetIndexAtDistance(distance) < lastVertex + 2
      evacuation.hidden_polyline.getPath().removeAt evacuation.hidden_polyline.getPath().getLength() - 1  if evacuation.hidden_polyline.getPath().getLength() > 1
      evacuation.hidden_polyline.getPath().insertAt evacuation.hidden_polyline.getPath().getLength(), app.path_to_evac.GetPointAtDistance(distance)
    else
      end_point = new google.maps.LatLng(app.places.closest.lat, app.places.closest.lng)

      evacuation.hidden_polyline.getPath().insertAt evacuation.hidden_polyline.getPath().getLength(), end_point


  # Узнает, куда нужно передвинуть маркер во время анимации и пытается это сделать
  # @note запускается из evacuation.start_animation
  # @param distance [Number] расстояние, на который нужно передвинуть маркер сваливания
  animate: (distance) ->
    point = app.path_to_evac.GetPointAtDistance(distance)

    # Если еще не дошли до конца
    if point?
      evacuation.move_marker(point, distance)
    else
      evacuation.finish_animation()


  # Передвигает маркер
  # @note запускается из evacuation.animate
  # @param point [LatLng] точка в пути на определенном расстоянии
  # @param distance [Number] расстояние, на который нужно передвинуть маркер сваливания
  move_marker: (point, distance) ->
    evacuation.escape_marker.setPosition point
    evacuation.poly_magic(distance)

    step = evacuation.path_length / 300
    window.setTimeout (->
      evacuation.animate(distance + step)
    ), 15


  # Заканчивает анимацию сваливания, открывая окно поделиться
  # @note запускается из evacuation.animate
  finish_animation: ->
    evacuation.escape_marker.setMap(null)
    $("#share_modal").modal()


  # Начало анимации сваливания
  # @note запускается из evacuation.escape
  start_animation: ->
    app.path_to_evac.setMap app.google_map
    app.google_map.setCenter app.path_to_evac.getPath().getAt(0)
    evacuation.hidden_polyline = new google.maps.Polyline(
      path: [app.path_to_evac.getPath().getAt(0)]
    )
    evacuation.path_length = app.path_to_evac.Distance()

    setTimeout (->
      evacuation.animate(500)
    ), 20


  # Адаптирует центр карты, чтобы правильно отображался весь маршрут
  # @param start_point [google.maps.LatLng] место начала маршрута
  # @param end_point [google.maps.LatLng] место конца
  # @param response [Маршрут] маршрут до места
  adjust_center: (response, start_point, end_point) ->
    # Если нет пути между точками
    if response.status == "ZERO_RESULTS"
      coordinates = [start_point, end_point]
      bounds = new google.maps.LatLngBounds()
      i = 0
      while i < coordinates.length
        bounds.extend coordinates[i]
        i++
    else
      bounds = response.routes[0].bounds

    app.google_map.fitBounds(bounds);
    app.google_map.setCenter(bounds.getCenter())

    # На десктопах отдаляет
    setTimeout(->
      unless app.mobile == true
        app.google_map.setZoom(app.google_map.getZoom() - 1)
    ,200)


  # Отображение инфобокса/(попапа на мобиле) у итоговой точки
  # @param end_point [google.maps.Lang] место конца маршрута
  create_end_place_infobox: (end_place) ->
    place_infobox = new InfoBox(app.infobox_options)
    infobox_content = evacuation.get_evac_infobox(end_place)

    place_infobox.setContent(infobox_content)
    setTimeout (->
      $(".evac_popup").fadeIn(200)
    ), 100

    place_infobox.open(app.google_map, end_place.marker)
    $("#tooltips").addClass("hidden")
    $(".news_evac").removeClass("hidden").html infobox_content


  # Устанавливает контент у инфобокса места, к которому будет идти эвакуация
  # @param place [Object] место
  # @return [DOM] содержимое инфобокса
  get_evac_infobox: (place) ->
    escape_text = evacuation.get_random_exit_text()
    infobox_content = "
      <div class='evac_popup escape'>
        <div class='left'>
          <div class='arrow-left arrow hidden-xs'></div>
          <div class='" + app.places.types[place.type_id].icon + " evac_icon'></div>
        </div>
        <div class='right'>
          <h5>Точка эвакуации</h5>
          <h4>#{place.name}</h4>
          <p class='time_to_evac'>#{escape_text}</p>
        </div>
      </div>
      "


  # Достает случайный текст при эвакуации в зависимости от длины пути, обрезая у него точку в конце.
  # @return [String] текст эвакуации
  get_random_exit_text: ->
    texts_array = []
    text = app.time_to_evac.text
    if text.substring(text.length-1) == "."
      text = text.slice(0, -1)
    if app.time_to_evac.value < 2400 # меньше 40 мин - добавляем 15 мин для 'учета' пробок
      minutes_before = parseInt(text.substr(0, text.indexOf(' ')))
      text = minutes_before + 15 + " мин"
    if app.time_to_evac.value < 10080 # 3 часа
      texts_array.push "Собирай манатки, тебе до эвакуации всего #{text}!"
      texts_array.push "Чего ты ждешь? От свободы тебя отделяет всего лишь #{text}!"
      texts_array.push "Обувайся и беги! Успеешь за #{text}!"
    else if app.time_to_evac.value < 43200 # 12 часов
      texts_array.push "Ты еще тут? Собирайся! Тебе до эвакуации всего #{text}!"
      texts_array.push "Лови попутку! Тебе #{text} до точки эвакуации!"
    else if app.time_to_evac.value < 100001 # больше
      texts_array.push "Тебе долго ехать, но не сдавайся!"

    chosen_number = Math.floor(Math.random() * texts_array.length)
    texts_array[chosen_number]


  # Настройки маршрута
  # @param start_point [google.maps.LatLng] место начала
  # @param end_point [google.maps.LatLng] место конца маршрута
  # @return [Object] настройки маршрута
  get_directions_service_options: (start_point, end_point) ->
    origin: start_point
    destination: end_point
    travelMode: google.maps.TravelMode.DRIVING


  # Запоминает продолжительность маршрута, либо придумывает его
  # @param response [Маршрут] маршрут до места
  set_time_to_evac: (response) ->
    if response.status == "ZERO_RESULTS"
      app.time_to_evac = {value: 100000, text: ""}
    else
      app.time_to_evac = response.routes[0].legs[0].duration