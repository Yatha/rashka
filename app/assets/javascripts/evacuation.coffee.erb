# Обработка эвакуации
$ ->
  evacuation.init()


# Параметры и функции, связанные с эвакуацией
evacuation =
  dom_element: $("#evac_btn")


  # Запуск слушателя при нажатии
  init: ->
    # При нажатии строит маршрут до ближайшего места от текущего, отображает кнопку рассказать и увеличивает статистику
    $(evacuation.dom_element).click ->
      evacuation.get_directions(app.current_location, app.places.closest)
      evacuation.share_mode_on()
      evacuation.evac_stat_increase()


  # Скрывает кнопку валить и показывает кнопку рассказать
  share_mode_on: ->
    @.dom_element.addClass("hidden")
    $("#share_btn").removeClass("hidden")


  # Запускает метод увеличения статистики
  evac_stat_increase: ->
    $.ajax "../stats/evacuate",
      type: "POST"
      dataType: "json"


  # Строит маршрут до ближайшего места
  # @param start_point [google.maps.LatLng] место начала
  # @param end_place [Object] место конца
  get_directions: (start_point, end_place) ->
    end_point = new google.maps.LatLng(end_place.lat, end_place.lng)

    directions_service =new google.maps.DirectionsService()
    directions_service_options = evacuation.get_directions_service_options(start_point, end_point)

    directions_service.route(directions_service_options, (response, status) ->
      #в случае успеха запроса выводит маршрут
      if status == google.maps.DirectionsStatus.OK
        evacuation.show_directions(response)
        app.current_marker.setIcon("<%= asset_path('map/mover.png') %>")
        evacuation.create_end_place_infobox(end_place)
#        evacuation.adjust_center(response)


        app.polyline = new google.maps.Polyline(
          path: []
          strokeColor: "#FF0000"
          strokeWeight: 3
        )

        bounds = new google.maps.LatLngBounds()
        route = response.routes[0]
        startLocation = new Object()
        app.endLocation = new Object()

        # For each route, display summary information.
        path = response.routes[0].overview_path
        legs = response.routes[0].legs
#        console.log "path"
#        console.log path
#        console.log "legs"
#        console.log legs
        i = 0
        while i < legs.length
          if i is 0
            startLocation.latlng = legs[i].start_location
            startLocation.address = legs[i].start_address
            console.log "startLocation"
            console.log startLocation

            app.mega_marker = new google.maps.Marker(
              position: legs[i].start_location
              map: app.google_map
              title: "hai"
            )
          app.endLocation.latlng = legs[i].end_location
          app.endLocation.address = legs[i].end_address
          console.log "app.endLocation"
          console.log app.endLocation
          steps = legs[i].steps
          console.log "steps"
          console.log steps
          j = 0
          while j < steps.length
            nextSegment = steps[j].path
            k = 0
            while k < nextSegment.length
              app.polyline.getPath().push nextSegment[k]
              bounds.extend nextSegment[k]
              k++
            j++
          i++
        app.polyline.setMap app.google_map
        app.google_map.fitBounds bounds

        evacuation.startAnimation()
    )

  #=============== animation functions ======================
  updatePoly: (d) ->

    lastVertex = 1
    # Spawn a new polyline every 20 vertices, because updating a 100-vertex poly is too slow
    app.poly2 = new google.maps.Polyline([app.polyline.getPath().getAt(lastVertex - 1)])  if app.poly2.getPath().getLength() > 20

    # map.addOverlay(app.poly2)
    if app.polyline.GetIndexAtDistance(d) < lastVertex + 2
      app.poly2.getPath().removeAt app.poly2.getPath().getLength() - 1  if app.poly2.getPath().getLength() > 1
      app.poly2.getPath().insertAt app.poly2.getPath().getLength(), app.polyline.GetPointAtDistance(d)
    else
      app.poly2.getPath().insertAt app.poly2.getPath().getLength(), app.endLocation.latlng
    return


  animate: (d) ->

    # alert("animate("+d+")");
#    if d > eol
#      app.google_map.panTo app.endLocation.latlng
#      app.mega_marker.setPosition app.endLocation.latlng
#      return
    p = app.polyline.GetPointAtDistance(d)
    console.log d
    console.log p
    if p == null
      console.log 123
      console.log app.endLocation.latlng
#      end_point = new google.maps.LatLng(app.endLocation.lat, app.endLocation.lng)
#      console.log end_point
      app.google_map.panTo app.endLocation.latlng
#      app.mega_marker.setPosition end_point
      console.log d
      console.log "stopped"
    else
      console.log p == null
      app.google_map.panTo p
      app.mega_marker.setPosition p
      evacuation.updatePoly d

      step = 2000
      tick = 100
      animationTimeout = window.setTimeout (->
        evacuation.animate(d + step)
      ), tick
    return

  startAnimation: ->
    console.log app.polyline
    eol = app.polyline.Distance()
    app.google_map.setCenter app.polyline.getPath().getAt(0)

    # map.addOverlay(new google.maps.Marker(polyline.getAt(0),G_START_ICON));
    # map.addOverlay(new GMarker(polyline.getVertex(polyline.getVertexCount()-1),G_END_ICON));
    # marker = new google.maps.Marker({location:polyline.getPath().getAt(0)} /* ,{icon:car} */);
    # map.addOverlay(marker);
    app.poly2 = new google.maps.Polyline(
      path: [app.polyline.getPath().getAt(0)]
      strokeColor: "#0000FF"
      strokeWeight: 10
    )

    # map.addOverlay(poly2);
    setTimeout (->
      evacuation.animate(50)
    ), 200
    return


  # Адаптирует центр карты, чтобы правильно отображался весь маршрут
  # @param response [Маршрут] маршрут до места
  adjust_center: (response) ->
    bounds = response.routes[0].bounds
    app.google_map.fitBounds(bounds);
    app.google_map.setCenter(bounds.getCenter())
    setTimeout(->
      app.google_map.setZoom(app.google_map.getZoom() - 1)
    ,200)


  # Отображение инфобокса/(тултипа на мобиле) у места
  # @param end_point [google.maps.Lang] место конца маршрута
  create_end_place_infobox: (end_place) ->
    place_infobox = new InfoBox(app.infobox_options)
    infobox_content = evacuation.get_evac_infobox(end_place)

    place_infobox.setContent(infobox_content)
    setTimeout (->
      $(".evac_popup").fadeIn(200)
    ), 100

    place_infobox.open(app.google_map, end_place.marker)
    $("#tooltips").addClass("hidden")
    $(".news_evac").removeClass("hidden").html infobox_content


  # Устанавливает контент у инфобокса места, к которому будет идти эвакуация
  # @param place [Object] место
  # @return [DOM] содержимое инфобокса
  get_evac_infobox: (place) ->
    infobox_content = "
      <div class='evac_popup escape'>
        <div class='left'>
          <img src=" + "<%= asset_path('arrow-left.png') %>" + " class='arrow hidden-xs'>
          <img src='"+ app.places.types[place.type_id].icon + "'class='evac_icon'>
        </div>
        <div class='right'>
          <h5>Точка эвакуации</h5>
          <h4>#{place.name}</h4>
          <p class='time_to_evac'>Собирай манатки, ведь тебе до него всего #{app.time_to_evac}!</p>
        </div>
      </div>
      "


  # Создает рендерер для маршрута
  # @return [google.maps.DirectionsRenderer] рендерер маршрута
  get_directions_renderer: () ->
    directions_renderer_options =
      map: app.google_map
      suppressMarkers: true
      polylineOptions:{strokeColor:'#24c94b', strokeWeight: "6"}
    new google.maps.DirectionsRenderer(directions_renderer_options)


  # Настройки отображения маршрута
  # @param start_point [google.maps.LatLng] место начала
  # @param end_point [google.maps.LatLng] место конца маршрута
  # @return [Object] настройки маршрута
  get_directions_service_options: (start_point, end_point) ->
    origin: start_point
    destination: end_point
    travelMode: google.maps.TravelMode.DRIVING


  # Отображение маршрута на карте и запоминание времени маршрута
  # @param response [Маршрут] маршрут до места
  show_directions: (response) ->
    directions_renderer = evacuation.get_directions_renderer()
    directions_renderer.setDirections(response)
    app.directions_renderer = directions_renderer
    app.time_to_evac = response.routes[0].legs[0].duration.text