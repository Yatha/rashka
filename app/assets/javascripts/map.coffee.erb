# Обработка событий на карте. Грузит карту, ставит в дефолтное место маркер, отображает места и спрашивает текущее местоположение
$ ->
  map.init()
  map.put_marker_on_current()
  map.show_places()
  map.cluster_markers()
  map.get_current_location()


# Параметры и функции карты
map =
  dom: document.getElementById("map-canvas")
  last_valid_center: app.current_location
  options:
    center: app.current_location,
    disableDefaultUI: true,
    zoom: 13
    minZoom: 4
  current_marker: undefined
  last_valid_center: undefined
  bounds: undefined
  markers: []


  # Получает расстояние до каждой точки эвакуации и рисует их на карте
  show_places: ->
    app.places.objects.forEach(places.get_distance)
    app.places.objects.forEach(places.render)


  # Ставит маркер на координаты
  # @param location [LatLng] координаты точки
  set_current_location: (location) ->
    app.google_map.setCenter location
    app.current_location = location
    map.put_marker_on_current()


  # В случае успеха определения местоположения юзера, обновляет карту
  # @param location [LatLng] координаты местоположения юзера
  nav_geo_success: (location) ->
    map.current_marker.setMap(null)
    unless app.directions_renderer == undefined
      app.directions_renderer.setMap(null)
      #TODO: ресетить кнопку валить, раз уж мы на всякий стираем маршрут
    current_location = new google.maps.LatLng(location.coords.latitude, location.coords.longitude)
    map.set_current_location(current_location)
    map.reset_markers()


  # В случае ошибки получения гео локации выводи лажу
  nav_geo_error: ->
    console.log "Unable to retrieve your location"


  # Спрашивает у пользователя его местоположение
  get_current_location: ->
    if navigator.geolocation
      navigator.geolocation.getCurrentPosition(map.nav_geo_success, map.nav_geo_error, { enableHighAccuracy:true })


  # Добавляет маркер с определенными параметрами к текущему месту
  put_marker_on_current: ->
    current_loc_marker_options =
      position: app.current_location
      icon: "<%= asset_path('current.png') %>"
      map: app.google_map
    map.current_marker = new google.maps.Marker current_loc_marker_options


  # Обновляет маркеры для подготовки к новому текущему местоположению
  reset_markers: ->
    app.places.objects.forEach(places.get_distance)
    app.places.objects.forEach(places.update_infobox)

                       
  # Проверяет, вышел ли пользователь за пределы границ карты. Передвигает в предыдущий "чистый" центер, если да, или записывает новый "чистый" центр
  checkBounds: ->
    map.last_valid_center = app.google_map.getCenter() if map.bounds.contains(app.google_map.getCenter())
    app.google_map.panTo map.last_valid_center


  # Группирует маркеры вместе в один, если они рядом
  cluster_markers: ->
    markerCluster_styles = [{
      url: "<%= asset_path('evac.png') %>",
      height: 60,
      width: 60,
      textSize: 1
    }]
    cluster = new MarkerClusterer(app.google_map, map.markers, {styles: markerCluster_styles})

    google.maps.event.addListener cluster, 'mouseover', ->
      console.log "lol"
    
  # Инициализация карты и обозначение границ
  init: ->
    app.google_map = new google.maps.Map(@.dom, @.options)    
    map.bounds = new google.maps.LatLngBounds(new google.maps.LatLng(41.2, 19.8), new google.maps.LatLng(77.792, 179.9999))

    # При передвижении по карте проверяет, находимся ли мы еще в пределах границы
    google.maps.event.addListener app.google_map, "center_changed", ->
      map.checkBounds()


# Параметры и функции мест
places =

  # Отображает место на карте: создает маркер для него
  # @param place [Object] место
  render:(place) ->
    place_position = new google.maps.LatLng(place.lat, place.lng)
    place_marker_options =
      position: place_position
      map: app.google_map
      icon: "<%= asset_path('evac.png') %>"
    place_marker = new google.maps.Marker(place_marker_options)
    place.marker = place_marker
    map.markers.push(place_marker)

    places.create_infobox(place, place_marker)


  # Создает инфобокс для места
  # @param place [Object] место
  # @param place_marker [google.maps.Marker] маркер места
  create_infobox:(place, place_marker) ->
    place.infobox = new InfoBox(app.infobox_options)
    places.update_infobox(place)

    # При наведении по маркеру открывает инфобокс
    google.maps.event.addListener place_marker, 'mouseover', ->
      if !app.time_to_evac || app.places.closest != place
        place.infobox.open(app.google_map, this)
        setTimeout(->
          $(".evac_popup").fadeIn(300)
          200
        )

    # И закрывает
    google.maps.event.addListener place_marker, 'mouseout', ->
      place.infobox.close()


  # Устанавливает контент у инфобокса места
  # @param place [Object] место
  update_infobox: (place) ->
    infobox_content = "
      <div class='evac_popup'>
        <div class='left'>
          <img src=" + "<%= asset_path('arrow-left.png') %>" + " class='arrow'>
          <img src='"+ app.places.types[place.type_id].icon + "'class='evac_icon'>
        </div>
        <div class='right'>
          <h5>Точка эвакуации</h5>
          <h4>#{place.name}</h4>
          <p class='distance'>#{place.distance.toFixed(1)} км</p>
        </div>
      </div>
      "
    place.infobox.setContent(infobox_content)


  # Перевод в радианы
  # @param x [Integer] число
  # @return [String] радианы
  rad:(x) ->
    x * Math.PI / 180


  # Добавляет расстояние от места до текущего положения
  # @param place [Object] место
  get_distance:(place) ->
    cur_loc_lat = app.current_location.lat()
    cur_loc_lng = app.current_location.lng()
    earth_radius = 6371
    place_lat = place.lat
    place_lng = place.lng

    dLat = places.rad(place_lat - cur_loc_lat)
    dLong = places.rad(place_lng - cur_loc_lng)
    a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(places.rad(cur_loc_lat)) * Math.cos(places.rad(cur_loc_lat)) * Math.sin(dLong / 2) * Math.sin(dLong / 2)
    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
    place.distance = earth_radius * c

    places.closest_check(place)


  # Проверяет, является ли это место ближайшим к текущему и записывает, если да
  # @param place [Object] место
  closest_check:(place) ->
    if app.places.closest == undefined || app.places.closest.distance > place.distance
      app.places.closest = place